# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value
    communication_types: [C, S]

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    AppBundle\Model\CommunicationsManager:
        public: true
        arguments:
            $dataFetcher: '@AppBundle\Model\Fetcher\DataFetcher'
            $logger: '@logger'
            $types: '%communication_types%'

    AppBundle\Model\Fetcher\DataFetcher: '@AppBundle\Model\Fetcher\HttpDataFetcher'

    AppBundle\Model\Fetcher\HttpDataFetcher:
        arguments:
            $baseUrl: 'https://gist.githubusercontent.com/joserobleda/1530e8a6796f3286443eac80f419b13e/raw/81f159a80a0035a6173415b6d9e45b673c682bd1'
            $client: '@guzzleClient'
            $communicationFactory: '@AppBundle\Model\HttpCommunicationFactory'
            $logger: '@logger'

    guzzleClient:
        class: GuzzleHttp\Client
